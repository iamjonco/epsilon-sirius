import 'EcoreUtil.eol';
import 'SiriusUtil.eol';

/**
 * PRE BLOCK - Sets up initial structures in diagram
 */
pre {
	// Setup inital structures	
	// TODO: Handle multiple Groups
	var topGroup : new ODesign!viewpoint::description::Group;
	topGroup.name := getDiagramClass().name;
	
	// TODO: Handle multiple Viewpoints
	var topViewpoint : new ODesign!viewpoint::description::Viewpoint;
	topGroup.ownedViewpoints.add(topViewpoint);
	topViewpoint.name := getDiagramClass().name;
	topViewpoint.modelFileExtension := 
		getDiagramClass().getAnnotationValue('gmf.diagram','model.extension').ifUndefined('*');
	
	// TODO: Handle multiple metamodel imports
	// TODO: do we need multiple tool sections?
	// FIXME: Href link in metamodel that is generated is not well formatted
	// TODO: Handle multiple layers - probs should be the nodes that set it
	var diagramMapping := new ODesign!diagram::description::DiagramDescription;
	topViewpoint.ownedRepresentations.add(diagramMapping);
	diagramMapping.name := getDiagramClass()
		.getAnnotationValue('gmf.diagram', 'label')
		.ifUndefined('Diagram');
	diagramMapping.domainClass := getDiagramClass().getDomainClassString();
	diagramMapping.metamodel.add(getDiagramClass().ePackage);
	
	// TODO: handle additional layering
	diagramMapping.defaultLayer := new ODesign!diagram::description::Layer;
	diagramMapping.defaultLayer.name := 'Default';
	
	// Setup Default Tool Palettes
	var NODE_TOOLS := new ODesign!diagram::description::tool::ToolSection;
	NODE_TOOLS.name := 'Nodes';
	var EDGE_TOOLS := new ODesign!diagram::description::tool::ToolSection;
	EDGE_TOOLS.name := 'Links';
	
	getDefaultLayer().toolSections.add(NODE_TOOLS);
	getDefaultLayer().toolSections.add(EDGE_TOOLS);
	
	// Setup Default Colors
	var DEFAULT_PALETTE : ODesign!viewpoint::description::UserColorsPalette := 
		new ODesign!UserColorsPalette;
	DEFAULT_PALETTE.name := 'Default';
	topGroup.userColorsPalettes.add(DEFAULT_PALETTE);
	
	var DEFAULT_COLOR : ODesign!viewpoint::description::UserFixedColor :=
		newColor('DEFAULT_COLOR', 211, 211, 211);
	var DEFAULT_EDGE_COLOR : ODesign!viewpoint::description::UserFixedColor :=
		newColor('DEFAULT_EDGE_COLOR', 0, 0, 0);
	var DEFAULT_BORDER_COLOR : ODesign!viewpoint::description::UserFixedColor :=
		newColor('DEFAULT_BORDER', 0, 0, 0);
	var DEFAULT_LABEL_COLOR : ODesign!viewpoint::description::UserFixedColor :=
		newColor('DEFAULT_LABEL', 0, 0, 0);
		
	DEFAULT_PALETTE.entries.add(DEFAULT_COLOR);
	DEFAULT_PALETTE.entries.add(DEFAULT_EDGE_COLOR);
	DEFAULT_PALETTE.entries.add(DEFAULT_BORDER_COLOR);
	DEFAULT_PALETTE.entries.add(DEFAULT_LABEL_COLOR);
}

/**
 * POST BLOCK - Responsible for fixing containment references throughout the
 * transformation.
 */
post {
	// Assign top level diagram mappings
	var topMappings := getDiagramClass()
		.getEAllContainments()
		.collect(r|r.eReferenceType)
		.collect(t|t.getConcreteSubMappings())
		.flatten();
	
	var layer := getDiagramMapping().defaultLayer; // TODO: Handle multiple layers
	for (mapping in topMappings) {
		if (mapping.isMapped())
			layer.reusedMappings.add(mapping);
		else if (mapping.isKindOf(ODesign!ContainerMapping))
			layer.containerMappings.add(mapping);
		else
			layer.nodeMappings.add(mapping);
	}
	
	// Assign container mappings
	for (class in ECore!EClass) {
		var topMapping := class.getNodeMapping();
		if (topMapping.isUndefined() 
			or not topMapping.isKindOf(ODesign!ContainerMapping)) 
				continue;
	
		var subMappings := class
			.getEAllContainments()
			.collect(r|r.eReferenceType)
			.collect(t|t.getConcreteSubMappings())
			.flatten();
			
		for (mapping in subMappings) {
			if (mapping.isMapped()) 
				if (mapping.isKindOf(ODesign!ContainerMapping)) 
					topMapping.reusedContainerMappings.add(mapping);
				else 
					topMapping.reusedNodeMappings.add(mapping);
					
			else if (mapping.isKindOf(ODesign!ContainerMapping))
				topMapping.subContainerMappings.add(mapping);
			else 
				topMapping.subNodeMappings.add(mapping);
		}
	}
}



/**
 * ============================================================================
 * SEMANTIC MAPPINGS
 * ============================================================================
 */

/**
 * Abstract base rule for mappings between EClass's and DiagramElements.
 * 
 * Sets up constraints to restrict the creation of elements
 */
@abstract
rule EClass2AbstractNodeMapping
	transform s : ECore!EClass
	to t : ODesign!diagram::description::AbstractNodeMapping {
	guard: s.isNode()
	
	// Setup creation constraints
	t.name := s.name;
	t.domainClass := s.getDomainClassString();
	t.semanticCandidatesExpression := "eol:return self.eContents;";
	t.preconditionExpression := "eol:return self.isTypeOf(Model!" + s.getDomainClassString() + ");";
}

rule EClass2ContainerMapping
	transform s : ECore!EClass
	to t : ODesign!diagram::description::ContainerMapping
	extends EClass2AbstractNodeMapping {
	guard: s.isNode() and s.hasCompartments()
}

rule EClass2NodeMapping
	transform s : ECore!EClass
	to t : ODesign!diagram::description::NodeMapping 
	extends EClass2AbstractNodeMapping {
	guard: s.isNode() and not s.hasCompartments()
}

@abstract
rule ENamedElement2EdgeMapping
	transform s : ECore!ENamedElement
	to t : ODesign!diagram::description::EdgeMapping {
	guard: s.isLink()
	
	getDefaultLayer().edgeMappings.add(t);
}
	
rule EClass2EdgeMapping
	transform s : ECore!EClass
	to t : ODesign!diagram::description::EdgeMapping
	extends ENamedElement2EdgeMapping {
	guard: s.isLink()
	
	var ann := s.getLinkAnn();
	
	// Relation is represented by a semantic model element/EClass
	t.name := s.name;
	t.domainClass := s.getDomainClassString();
	t.semanticCandidatesExpression := "eol:return self.eContents;";
	t.preconditionExpression := "eol:return self.isTypeOf(Model!" + s.getDomainClassString() + ");";
	t.useDomainElement := true;
	
	// Determine Source
	var sourceDet := ann.getDetail('source');
	var sourceFeature := s.eStructuralFeatures.selectOne(esf|esf.name == sourceDet);
	t.sourceMapping.addAll(sourceFeature.eReferenceType.getConcreteSubMappings());
	t.sourceFinderExpression := 'feature:' + sourceDet;
	
	// Determine Target
	var targetDet := ann.getDetail('target');
	var targetFeature := s.eStructuralFeatures.selectOne(sf|sf.name = targetDet);
	t.targetMapping.addAll(targetFeature.eReferenceType.getConcreteSubMappings());
	t.targetFinderExpression := 'feature:' + targetDet;
}

rule EReference2EdgeMapping
	transform s : ECore!EReference
	to t : ODesign!diagram::description::EdgeMapping
	extends ENamedElement2EdgeMapping {
	guard: s.isLink()
	
	t.name := s.eContainingClass.name + '2' + s.eReferenceType.name;
	t.useDomainElement := false;
	t.targetFinderExpression := 'feature:' + s.name;
	
	var sourceMappings := s.eContainingClass.getConcreteSubMappings();
	t.sourceMapping.addAll(sourceMappings);
	
	var targetMappings := s.eReferenceType.getConcreteSubMappings();
	t.targetMapping.addAll(targetMappings);	
}

/**
 * ============================================================================
 * STYLE DESCRIPTIONS
 * ============================================================================
 */
@abstract
rule EClass2LabelStyleDescription
	transform s : ECore!EClass
	to t : ODesign!diagram::description::LabelStyleDescription {
	
	t.labelExpression := s.getLabelExpression();
	
	var colorDet := s.getAnnotationValue('gmf.node', 'label.color');
	if (colorDet.isDefined()) t.labelColor := newColor(s.name + '_LABEL', colorDet);
	else t.labelColor := DEFAULT_LABEL_COLOR;
}

@abstract
rule EClass2BorderdStyleDescription
	transform s : ECore!EClass
	to t : ODesign!diagram::description::BorderedStyleDescription {
	guard: s.isNode()
	
	var ann := s.getNodeAnn();
	
	// Border Width
	t.borderSizeComputationExpression = ann.getDetail('border.width').ifUndefined('1');
	
	// Border Line Style
	var borderStyleDet := ann.getDetail('border.style');
	t.borderLineStyle := getLineStyle(borderStyleDet);
	
	// Border Color
	var colorDet := s.getAnnotationValue('gmf.node', 'border.color');
	if (colorDet.isDefined()) t.borderColor := newColor(s.name + '_BORDER', colorDet);
	else t.borderColor := DEFAULT_BORDER_COLOR;
}

@abstract
rule EClass2NodeStyleDescription 
	transform s : ECore!EClass
	to t : ODesign!NodeStyleDescription
	extends EClass2LabelStyleDescription, EClass2BorderdStyleDescription {
	guard: s.isNode() and not s.hasCompartments()
	
	var ann := s.getNodeAnn();
	
	// Label positioning
	var labelPlacementDet := ann.getDetail('label.placement');
	if (labelPlacementDet == 'bordered' or labelPlacementDet == 'external')
		t.labelPosition := ODesign!diagram::LabelPosition#border;
	else
		t.labelPosition := ODesign!diagram::LabelPosition#node;
	
	// Resizeable
	var resizeableDet := ann.getDetail('resizeable');
	if (resizeableDet == 'false') 
		t.resizeKind := ODesign!diagram::ResizeKind#NONE;
	else 
		t.resizeKind := ODesign!diagram::ResizeKind#NSEW;

	s.equivalent('EClass2NodeMapping').style := t;
}

@abstract
rule EClass2NodeStyleWithColor 
	transform s : ECore!EClass
	to t : ODesign!NodeStyleDescription
	extends EClass2NodeStyleDescription {
	
	var colorDet := s.getAnnotationValue('gmf.node', 'color');
	if (colorDet.isDefined()) t.color := newColor(s.name + '_COLOR', colorDet);
	else t.color := DEFAULT_COLOR;
}

rule EClass2SquareDescription
	transform s : ECore!EClass
	to t : ODesign!SquareDescription
	extends EClass2NodeStyleWithColor {
	guard: s.getAnnotationValue('gmf.node', 'shape') == 'square'
}

rule EClass2LozengeNodeDescription
	transform s : ECore!EClass
	to t : ODesign!LozengeNodeDescription
	extends EClass2NodeStyleWithColor {
	guard: s.getAnnotationValue('gmf.node', 'shape') == 'diamond'
	
	t.heightComputationExpression := "[view.name.size()+5/]";
	t.widthComputationExpression := "[view.name.size()+5/]";
}

rule EClass2EllipseNodeDescription
	transform s : ECore!EClass
	to t : ODesign!EllipseNodeDescription
	extends EClass2NodeStyleWithColor {
	// FIXME: Can probably simplify this guard
	guard: s.getAnnotationValue('gmf.node', 'shape') == 'ellipse' 
		or s.getAnnotationValue('gmf.node', 'shape') == null

	t.horizontalDiameterComputationExpression := "[view.name.size()+3/]";
	t.verticalDiameterComputationExpression := "4";
}

rule EClass2FlatContainerStyleDescription
	transform s : ECore!EClass
	to t : ODesign!FlatContainerStyleDescription
	extends EClass2LabelStyleDescription, EClass2BorderdStyleDescription {
	guard: s.isNode() and s.hasCompartments()
	
	s.equivalent('EClass2ContainerMapping').style := t;
}

@abstract
rule ENamedElement2EdgeStyleDescription
	transform s : ECore!ENamedElement
	to t : ODesign!diagram::description::style::EdgeStyleDescription {
	guard: s.isLink()
	
	var ann := s.getLinkAnn();
	
	// Line properties
	var colorDet := ann.getDetail('color');
	if (colorDet.isDefined()) t.strokeColor := newColor(s.name + '_EDGE_COLOR', colorDet);
	else t.strokeColor := DEFAULT_EDGE_COLOR;
	
	t.sizeComputationExpression = ann.getDetail('width').ifUndefined('1'); 	// TODO: Original value was [eContents()->size()/]? Why is this
	t.lineStyle := getLineStyle(ann.getDetail('style'));
	t.sourceArrow := getEdgeDecoration(ann.getDetail('source.decoration'));
	t.targetArrow := getEdgeDecoration(ann.getDetail('target.decoration'));
	
	s.equivalent('EClass2EdgeMapping', 'EReference2EdgeMapping').style := t;
}

rule EClass2EdgeStyleDescription 
	transform s : ECore!EClass
	to t : ODesign!diagram::description::style::EdgeStyleDescription
	extends ENamedElement2EdgeStyleDescription {
}

rule EReference2EdgeStyleDescription 
	transform s : ECore!EReference
	to t : ODesign!diagram::description::style::EdgeStyleDescription
	extends ENamedElement2EdgeStyleDescription {
}

/**
 * ============================================================================
 * TOOLS
 * ============================================================================
 */

@abstract
rule AbstractNodeCreateTool
	transform s : ECore!EClass
	to t : ODesign!diagram::description::tool::MappingBasedToolDescription {
	guard: s.isNode()
	
	NODE_TOOLS.ownedTools.add(t);
		
	// Initialise default variables
	t.name := s.name;
	t.variable := new ODesign!NodeCreationVariable;
	t.variable.name := "container";
	t.viewVariable := new ODesign!ContainerViewVariable;
	t.viewVariable.name := "containerView";
	
	// Build pre-condition expression
	t.precondition := "eol:var clazz = Model!EClass.all.selectOne(ec|ec.name=='"+s.name+"');"
	+ "var containments = container.eClass.eAllStructuralFeatures.select(sf|sf.containment);"
	+ "return containments.exists(ref|clazz.eAllSuperTypes.collect(st|st.name).includes(ref.eType.name) "
	+ "or clazz.name == ref.eType.name);";

	// Build Operation
	var initialOp := new ODesign!InitialNodeCreationOperation;
	t.initialOperation := initialOp;
	
	// Select the container to place new container in
	var contextOp := new ODesign!ChangeContext;
	t.initialOperation.firstModelOperations := contextOp;
	contextOp.browseExpression := 'eol:return container;';
	
	// Figure out what type of container and feature to place into
	var containments = s.getAllSuitableContainmentReferences();
	
	// Only one possible containment, no further checks needed
	if (containments.size() == 1) {
		contextOp.subModelOperations.add(s.newCreateInstanceOp(containments.first()));
	} 
	
	// More than one possible containment, add filters for desired container
	// TODO: probably can streamline this using ofKind relationships
	else {
		var switchOp := new ODesign!Switch;
		contextOp.subModelOperations.add(switchOp);
		
		for (ref : ECore!EReference in containments) {
			var switchChild : ODesign!SwitchChild;
			var createOp := new ODesign!CreateInstance;
			createOp.referenceName := ref.name;
			createOp.typeName := s.getDomainClassString();
			createOp.variableName := 'instance';
			
			if (hasMore) {
				switchChild := new ODesign!Case;
				switchChild.conditionExpression :=
					"eol:return container.isTypeOf(Model!" + ref.eContainingClass.name + ");";
				switchOp.cases.add(switchChild);
			} else {
				switchChild := new ODesign!Default;
				switchOp.`default` := switchChild;
			}
			
			switchChild.subModelOperations.add(createOp);
		}
	}
	
	NODE_TOOLS.ownedTools.add(t);
}

rule CreateNodeTool
	transform s : ECore!EClass
	to t : ODesign!diagram::description::tool::NodeCreationDescription
	extends AbstractNodeCreateTool {
	guard: not s.hasCompartments() 
		
	t.nodeMappings.add(s.equivalent('EClass2NodeMapping'));
}

rule CreateContainerTool
	transform s : ECore!EClass
	to t : ODesign!diagram::description::tool::ContainerCreationDescription
	extends AbstractNodeCreateTool {
	guard: s.hasCompartments()
	
	t.containerMappings.add(s.equivalent('EClass2ContainerMapping'));
}

/**
 * ============================================================================
 * HELPER OPERATIONS
 * ============================================================================
 */

// DO NOT CACHE
operation ODesign!AbstractNodeMapping isMapped() : Boolean {
	return self.eContainer.isDefined() 
		and (self.eContainer.isTypeOf(ODesign!Layer) 
		or self.eContainer.isKindOf(ODesign!ContainerMapping));
}

@cached
operation ECore!EClass getConcreteSubMappings() : Collection {
	return self.getConcreteSubtypes()
		.flatten()
		.collect(t|t.getNodeMapping())
		.select(m|m.isDefined());
}

@cached
operation ECore!EReference getConcreteSubMappings() : Collection {
	return self.eReferenceType.getConcreteSubMappings();
}

@cached
operation ECore!EClass getNodeMapping() : ODesign!AbstractNodeMapping {
	return self.equivalent('EClass2ContainerMapping', 'EClass2NodeMapping');
}

@cached
operation getDiagramMapping() : ODesign!DiagramDescription {
	return diagramMapping;
}

@cached
operation getDefaultLayer() : ODesign!Layer {
	return getDiagramMapping().defaultLayer;
}

@cached
operation ECore!EClass getDomainClassString() : String {
	return self.ePackage.name + '::' + self.name;
}

operation ECore!EClass newCreateInstanceOp(containment : ECore!EReference) : ODesign!CreateInstance {
	var op := new ODesign!CreateInstance;
	op.referenceName := containment.name;
	op.typeName := self.getDomainClassString();
	op.variableName := 'instance';
	return op;
}